qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=4),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=3),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(Age, g=2),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(FlyAsh, g=2),data=training)
qplot(finMod$fitted,finMod$residuals,colour=cut2(FlyAsh, g=3),data=training)
plot(mixtures$CompressiveStrength[inTrain])
plot(mixtures$CompressiveStrength[inTrain], col=Age)
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$Age)
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$FlyAsh)
names(mixtures)
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$FlyAsh[inTrain])
plot(mixtures$CompressiveStrength[inTrain], col=mixtures$Age[inTrain])
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age[inTrain], g=3))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age[inTrain], g=2))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age[inTrain], g=4))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age, g=4))
plot(mixtures$CompressiveStrength[inTrain], col=cut2(mixtures$Age, g=3))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$SuperPlasticizer)
names(mixtures)
hist(mixtures$Superplasticizer)
?hist
hist(mixtures$Superplasticizer, breaks=10)
hist(mixtures$Superplasticizer, breaks=100)
hist(mixtures$Superplasticizer, breaks=50)
mixtures$Superplasticizer
hist(log(mixtures$Superplasticizer, breaks=50))
hist(log(mixtures$Superplasticizer), breaks=50)
hist(log10(mixtures$Superplasticizer), breaks=50)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grepl("IL", names(training))
grepl("^IL", names(training))
ILtraining <- training[grepl("^IL", names(training)),]
names(training)
ILtraining <- training[1+grepl("^IL", names(training)),]
names(ILtraining)
ILtraining <- training[,1+grepl("^IL", names(training))]
names(ILtraining)
ILtraining <- training[,grepl("^IL", names(training))]
names(ILtraining)
training[,1]
head(training)
preProc <- preProcess(ILtraining,method="pca")
spamPC <- predict(preProc,ILtraining)
plot(spamPC[,1],spamPC[,2],col=typeColor)
?preProcess
preProc
preProc <- preProcess(ILtraining,method="pca", thresh=.9)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILtraining <- training[,grepl("^IL", names(training))&&"diagnosis"]
names(ILtraining)
ILtraining <- training[,grepl("^IL", names(training))&"diagnosis"]
ILtraining <- training[,grepl("^IL"|"diagnosis", names(training))]
ILtraining <- training[,grepl("^IL")|grepl("diagnosis"), names(training))]
ILtraining <- training[,grepl("^IL")|grepl("diagnosis")]
ILtraining <- training[,grepl("^IL", names(training))|grepl("diagnosis", names(training))]
names(ILtraining)
names(ILtraining[,-1])
preProc <- preProcess(ILtraining[,-1],method="pca", thresh=.8)
trainPC <- predict(preProc, ILtraining[,-1])
modelFit <- train(ILtraining$diagnosis ~ .,method="glm",data=trainPC)
modelFit
testingIL <- testing[,grepl("^IL", names(testing))|grepl("diagnosis", names(testing))]
testPC <- predict(preProc, ILtesting[,-1])
ILtesting <- testing[,grepl("^IL", names(testing))|grepl("diagnosis", names(testing))]
testPC <- predict(preProc, ILtesting[,-1])
confusionMatrix(ILtesting$diagnosis,predict(modelFit,testPC)) # get accuracy
modelFit <- train(diagnosis ~., data=training, method = "glm")
test <- predict(modelFit, testing[,-1])
confusionMatrix(testing$diagnosis, predict(modelFit, test))
test <- predict(modelFit, testing)
confusionMatrix(testing$diagnosis, predict(modelFit, test))
test
modelFit
test <- predict(modelFit, testing[,-1])
prediction <- predict(modelFit, newdata=testing)
confusionMatrix(prediction, testing$diagnosis)
confusionMatrix(ILtesting$diagnosis,predict(modelFit,testPC)) # get accuracy
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILtraining <- training[,grepl("^IL", names(training))|grepl("diagnosis", names(training))]
preProc <- preProcess(ILtraining[,-1],method="pca", thresh=.8)
trainPC <- predict(preProc, ILtraining[,-1])
modelFitPC <- train(ILtraining$diagnosis ~ .,method="glm",data=trainPC)
ILtesting <- testing[,grepl("^IL", names(testing))|grepl("diagnosis", names(testing))]
testPC <- predict(preProc, ILtesting[,-1])
confusionMatrix(ILtesting$diagnosis,predict(modelFitPC,testPC)) # get accuracy
modelFit <- train(diagnosis ~., data=ILtraining, method = "glm")
prediction <- predict(modelFit, newdata=ILtesting)
confusionMatrix(prediction, ILtesting$diagnosis)
First Slide
install_github("randyzwitch/RSiteCatalyst", ref="master")
devtools::install_github("randyzwitch/RSiteCatalyst", ref="master")
library(RSiteCatalyst)
?QueueOvertime
?GetClassifications
library(slidify)
set.seed(62433)
modRF <- train(diagnosis~., method="rf", data=training); beep(3)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
```{r}
set.seed(62433)
modRF <- train(diagnosis~., method="rf", data=training); beep(3)
modGBM <- train(diagnosis~., method="gbm", data=training); beep(2)
modLDA <- train(diagnosis~., method="lda", data=training); beep(7)
predict.RF <- predict(modRF, testing)
predict.GBM <- predict(modGBM, testing)
predict.LDA <- predict(modLDA, testing)
predict.DF <- data.frame(predict.RF, predict.GBM, predict.LDA, diagnosis=testing$diagnosis)
modStacked <- train(testing~., method="rf", data=predict.DF)
confusionMatrix(predict.RF, testing$diagnosis)$overall[1]
confusionMatrix(predict.GBM, testing$diagnosis)$overall[1]
confusionMatrix(predict.LDA, testing$diagnosis)$overall[1]
modStacked$results
modStacked <- train(testing~., method="rf", data=predict.DF)
modStacked <- train(diagnosis~., method="rf", data=predict.DF)
modStacked$results
set.seed(62433)
modRF <- train(diagnosis~., method="rf", data=training); beep(3)
modGBM <- train(diagnosis~., method="gbm", data=training); beep(2)
modLDA <- train(diagnosis~., method="lda", data=training); beep(7)
predict.RF <- predict(modRF, testing)
predict.GBM <- predict(modGBM, testing)
predict.LDA <- predict(modLDA, testing)
predict.DF <- data.frame(predict.RF, predict.GBM, predict.LDA, diagnosis=testing$diagnosis)
modStacked <- train(diagnosis~., method="rf", data=predict.DF)
confusionMatrix(predict.RF, testing$diagnosis)$overall[1]
confusionMatrix(predict.GBM, testing$diagnosis)$overall[1]
confusionMatrix(predict.LDA, testing$diagnosis)$overall[1]
modStacked$results
confusionMatrix(predict(modStacked, testing), testing$diagnosis)$overall[1]
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF <- train(diagnosis~., method="rf", data=training); beep(3)
set.seed(62433)
modGBM <- train(diagnosis~., method="gbm", data=training); beep(2)
set.seed(62433)
modLDA <- train(diagnosis~., method="lda", data=training); beep(7)
predict.RF <- predict(modRF, testing)
predict.GBM <- predict(modGBM, testing)
predict.LDA <- predict(modLDA, testing)
stacked.DF <- data.frame(predict.RF, predict.GBM, predict.LDA, diagnosis=testing$diagnosis)
modStacked <- train(diagnosis~., method="rf", data=predict.DF)
confusionMatrix(predict.RF, testing$diagnosis)$overall[1]
confusionMatrix(predict.GBM, testing$diagnosis)$overall[1]
confusionMatrix(predict.LDA, testing$diagnosis)$overall[1]
modStacked$results
confusionMatrix(predict(modStacked, testing), testing$diagnosis)$overall[1]
sum(predict.RF == testing$diagnosis)
sum(predict.GBM == testing$diagnosis)
sum(predict.LDA == testing$diagnosis)
sum(predict.DF == testing$diagnosis)
sum(predict(modStacked, testing) == testing$diagnosis)
library(RSiteCatalyst)
user.name <- "gghelani:Scholastic"
secret <- '39888df046d7dfa936a0b8b247b76c9b'
SCAuth(user.name, secret)
datefrom <- "2013-06-01"
dateto <- as.character(Sys.Date() - 1)
metrics <- c("visits", "orders")
ReportSuites <- GetReportSuites()
findRS <- function(RS) {
ReportSuiteIDs <- ReportSuites[grepl(RS, ReportSuites$site_title, ignore.case=TRUE),]
return(ReportSuiteIDs)
}
SSO <- findRS("sso")
SSO <- SSO[1,1] # report suite ID
?QueueTrended
SSO
BuildClassificationValueSegment
BuildClassificationValueSegment(evar13, Consumer, CorpDB_UserType)
BuildClassificationValueSegment(evar13, Consumer, "CorpDB_UserType")
BuildClassificationValueSegment("evar13", "Consumer", "CorpDB_UserType")
seg <- BuildClassificationValueSegment("evar13", "Consumer", "CorpDB_UserType")
?BuildClassificationValueSegment
findRS("global")
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, segment.inline=seg)
seg
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=seg)
elements <- GetElements("schopreprodmain")
View(elements)
trended <- QueueOvertime("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=seg)
trended <- QueueOvertime("schopreprodmain", datefrom, dateto, metrics, segment.inline=seg)
seg
seg <- BuildClassificationValueSegment("evar13", "Consumer", classification = "CorpDB_UserType")
seg
names(seg)
seg$id
names(seg$id)
?BuildClassificationValueSegment
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=list(id = "evar13", search = list(keywords = "Consumer")))
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=list(element = "evar13", search = list(keywords = "Consumer")))
seg <- BuildClassificationValueSegment("evar13", "Consumer", classification = "CorpDB_UserType")
seg
seg <- BuildClassificationValueSegment(element = "evar13", search.keywords = "Consumer", classification = "CorpDB_UserType")
seg
seg$classification
list(element = "evar13", search.keywords = "Consumer", classification = "CorpDB_UserType")
list(element = "evar13", search=list(keywords = "Consumer", type="OR", classification = "CorpDB_UserType")
)
list(id = "evar13", search=list(keywords = "Consumer", type="OR", classification = "CorpDB_UserType"))
seg
trended_reports <- QueueTrended("schosso", datefrom, dateto, metrics=c("visits","pageviews"),
elements="evar15",
segment.inline=list(id = "evar13", search=list(keywords = "Consumer", type="OR", classification = "CorpDB_UserType")),
date.granularity = "Day")
seg <- BuildClassificationValueSegment(element = "evar13", search.keywords = "Consumer", classifications = "CorpDB_UserType")
seg <- BuildClassificationValueSegment(element = "evar13", search.keywords = "Consumer", classification = "CorpDB_UserType")
trended_reports <- QueueTrended("schosso", datefrom, dateto, metrics=c("visits","pageviews"),segment.inline=seg, elements="evar13")
seg <- BuildClassificationValueSegment(element = "lasttouchchannel", search.keywords = "Scholastic")
trended_reports <- QueueTrended("schosso", datefrom, dateto, metrics=c("visits","pageviews"),segment.inline=seg, elements="evar13")
segments <- GetSegments("schopreprodmain")
head(segments)
?GetDefinition
segments <- GetDashboards("schopreprodmain")
?GetDashboards
install_github("randyzwitch/RSiteCatalyst", ref="master")
devtools::install_github("randyzwitch/RSiteCatalyst", ref="master")
seg
seg <- BuildClassificationValueSegment(element = "eVar13", search.keywords = "Consumer", classifications = "CorpDB_UserType")
seg <- BuildClassificationValueSegment(element = "eVar13", search.keywords = "Consumer", classification = "CorpDB_UserType")
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=seg)
seg
seg <- BuildClassificationValueSegment(element = "eVar13", search.keywords = "Consumer", classifications = "CorpDB_UserType")
seg <- BuildClassificationValueSegment(element = "eVar13", search.keywords = "Consumer", classification = "CorpDB_UserType")
seg
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=seg)
seg
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=list(element = "eVar13", search = list(keywords = "Consumer")))
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=list(id = "eVar13", search = list(keywords = "Consumer")))
user.name <- "gghelani:Scholastic"
secret <- '39888df046d7dfa936a0b8b247b76c9b'
SCAuth(user.name, secret)
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=list(id = "eVar13", search = list(keywords = "Consumer")))
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=seg)
seg <- BuildClassificationValueSegment(element = "SPS ID", search.keywords = "Consumer", classification = "CorpDB_UserType")
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "lasttouchchannel", segment.inline=seg)
?GetElements
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "page", segment.inline=seg)
seg
seg <- BuildClassificationValueSegment(element = "eVar13", search.keywords = "Consumer", classification = "CorpDB_UserType")
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "page", segment.inline=seg)
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "page", segment.inline=BuildClassificationValueSegment("page", search.keywords="SSO:Homepage"))
trended <- QueueTrended("schopreprodmain", datefrom, dateto, metrics, elements = "page", segment.inline=BuildClassificationValueSegment("Page", search.keywords="SSO:Homepage"))
trended <- QueueTrended("schopreprodmain", "2014-10-01", dateto, metrics, elements = "page", segment.inline=BuildClassificationValueSegment("Page", search.keywords="SSO:Homepage"))
?QueueTrended
library(RSiteCatalyst)
user.name <- "gghelani:Scholastic"
secret <- '39888df046d7dfa936a0b8b247b76c9b'
SCAuth(user.name, secret)
?GetSegments
segments <- GetSegments("schopreprodmain")
head(segments)
segments[1]
segments[[1]]
names(segments)
names(segments$id)
BuildClassificationValueSegment(element = evar13,search.keywords = "Consumer",classification = "CoprDB_UserType")
BuildClassificationValueSegment(element = evar13,search.keywords = "Consumer",classification = "CoprDB_UserType")
BuildClassificationValueSegment(element = evar13,search.keywords = "Consumer",classification = "CoprDB_UserType")
BuildClassificationValueSegment(element = evar13,search.keywords = "Consumer",classification = "CoprDB_UserType")
BuildClassificationValueSegment(element = "evar13",search.keywords = "Consumer",classification = "CoprDB_UserType")
sps_segment <- BuildClassificationValueSegment(element = "evar13",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment
sps$id
sps_segment$id
sps_segment$element
sps_segment$element <- "evar13"
sps_segment
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment$id <- ""
sps_segment
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = list(elements="evar13", classification = "CorpDB_UserType",
search= list(keywords="Consumer")))
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = list(element="evar13", classification = "CorpDB_UserType",
search= list(keywords="Consumer")))
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Month",
segment.inline = list(element = "page",
search= list(keywords="Consumer")))
test_segment <- BuildClassificationValueSegment(element = "page",search.keywords = "Homepage")
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Month",
segment.inline = list(element = "page",
search= list(keywords="Consumer")))
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Month",
segment.inline = test_segment)
test_segment <- BuildClassificationValueSegment(element = "Page",search.keywords = "Homepage")
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Month",
segment.inline = test_segment)
test_segment <- BuildClassificationValueSegment(element = "Page",search.keywords = "Homepage")
trended2 <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Month",
segment.inline = test_segment)
?BuildLineItemSegment
BuildLineItemSegment("evar13")
?BuildLineItemSegment
sps_segment <- BuildClassificationValueSegment(element = "EVAR13",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment <- BuildClassificationValueSegment(element = "EVar13",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment <- BuildClassificationValueSegment(element = "Last Touch Detail",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment <- BuildClassificationValueSegment(element = "lasttouchdetail",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment <- BuildClassificationValueSegment(element = "page",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
sps_segment <- BuildClassificationValueSegment(id = "evar13",search.keywords = "Consumer",classification = "CoprDB_UserType")
sps_segment <- BuildClassificationValueSegment(element = "evar13",search.keywords = "Consumer",classification = "CoprDB_UserType")
trended <- QueueTrended("schopreprodmain", "2014-10-01", "2014-10-31", metrics="visits",
elements = "mobiledevicetype", date.granularity = "Week",
segment.inline = sps_segment)
library(RCurl)
ftp <- "ftp://ftp2.omniture.com/AW/"
userpwd <- "schokidscommunity_9120383:nM*bAZ4i"
filenames <- getURL(ftp, userpwd="schokidscommunity_9120383:nM*bAZ4i",
ftp.use.epsv = FALSE, dirlistonly = TRUE)
filenames <- unlist(strsplit(filenames, "\n"))
filenames
download.file(paste0("ftp://",userpwd,"@ftp2.omniture.com/AW/",filenames[3]),
file="global_storia.csv")
download.file(paste0("ftp://",userpwd,"@ftp2.omniture.com/AW/",filenames[3]))
download.file(paste0("ftp://",userpwd,"@ftp2.omniture.com/AW/",filenames[3]),
destfile="global_storia.csv")
paste0("ftp://",userpwd,"@ftp2.omniture.com/AW/",filenames[3])
getwd()
data <- read.csv("documents/global_storia.csv")
data <- read.csv("./documents/global_storia.csv")
data <- read.csv("global_storia.csv")
head(data)
str(data)
library(db.r)
tail(data)
names(data)
names(data) <- tolower(names(data))
grepl("/.", names(data))
grepl("\.", names(data))
grepl(".", names(data))
grepl("//.", names(data))
grepl("/.", names(data))
grepl("\\.", names(data))
names(data) <- gsub("\\.", "", names(data))
names(data)
data <- data[1:1523,]
save(data, "global_storia2.csv")
?save
save(data, file ="global_storia2.csv")
head(data)
load("./data/final_grams.Rda")
setwd("~/datasciencecoursera/My Files/10-Capstone/final/text-predictor")
load("./data/final_grams.Rda")
attributes(all_grams)
object.size(all_grams)
format(object.size(all_grams), "Mb")
library(stringr)
library(qdap)
library(data.table)
library(dplyr)
load("~/datasciencecoursera/My Files/10-Capstone/Data/clean_data.RData")
rm(clean_docs)
load("~/datasciencecoursera/My Files/10-Capstone/Data/final/cleaned/corpus_sample.Rda")
rm(sample.corpus)
head(data)
x <- "this is a string."
x[-1]
x
grepl("[\\.?!]$", x)
grepl("[\\.?!]$", "what?")
grepl("[\\.?!]$", "what")
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(all_grams)
head(all_grams)
all_grams$gram[1]
class(all_grams)
grepl("", all_grams$gram[1])
all_grams  <- filter(all_grams, !(grepl("", gram)))
load("./data/final_grams.Rda")
all_grams %>% filter(grepl("", gram)) %>% count(gram)
grepl("^$", all_grams$gram[1])
all_grams  <- filter(all_grams, !(grepl("^$", gram)))
load("./data/final_grams.Rda")
all_grams  <- filter(all_grams, !(grepl("^$", gram)))
head(all_grams)
?word
word(all_grams$gram[1], -1)
all_grams  %>% filter((word(gram, -1) == n)) %>% head()
all_grams  %>% filter((word(gram, -1) == n)) %>% count()
all_grams   <- filter(all_grams, word(gram, -1) != n)
head(all_grams)
head(all_grams,20)
all_grams <- filter(all_grams, !(grepl("^[‘'-]", gram)))
head(all_grams,20)
all_grams <- filter(all_grams, !(grepl("^[‘'-\\.“]", gram)))
head(all_grams,20)
all_grams <- filter(all_grams, !(grepl("^[‘'-\\.“”]", gram)))
head(all_grams,20)
all_grams <- filter(all_grams, !(grepl("^[`~]", gram)))
head(all_grams,20)
grepl("^[a-zA-Z],head(all_grams,20))
)
grepl("^[a-zA-Z]",head(all_grams,20))
grepl("^[a-zA-Z]",head(all_grams$gram,20))
grepl("^[a-zA-Z]",head(all_grams$gram,30))
all_grams[grepl("^[a-zA-Z]",head(all_grams$gram,30)),]
all_grams[grepl("^[a-zA-Z]",head(all_grams$gram,50)),]
save(all_grams, "final_grams2.Rda")
save(all_grams, destfile = "final_grams2.Rda")
?save
save(all_grams, file = "final_grams2.Rda")
all_grams <- filter(all_grams, grepl("^[A-Za-z]", gram))
head(all_grams)
head(all_grams, 20)
format(object.size(all_grams))
format(object.size(all_grams), "Mb")
all_grams <- filter(all_grams, grepl("\"", gram))
load("./data/final_grams2.Rda")
load("final_grams2.Rda")
all_grams <- filter(all_grams, grepl("^[A-Za-z]", gram))
all_grams <- filter(all_grams, !(grepl("\"", gram)))
getwd()
head(all_grams)
head(all_grams,20)
head(all_grams, 30)
shiny::runApp()
library(shinyBS)
install.packages("shinyBS")
bsDemo()
library(shinyBS)
bsDemo()
all_grams <- filter(all_grams, grepl("^[A-Za-z]", gram))
all_grams <- filter(all_grams, !(grepl("\"", gram)))
head(all_grams,20)
word(all_grams$gram[20], -1)
word(all_grams$gram[20], 1)
all_grams <- filter(all_grams, word(gram, -1) != word(gram, 1))
format(object.size(all_grams), "Mb")
save(all_grams, file = "final_grams.Rda")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
